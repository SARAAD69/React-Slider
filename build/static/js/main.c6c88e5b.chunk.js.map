{"version":3,"sources":["images/1.jpg","images/2.jpg","images/3.jpg","images/4.jpg","images/5.jpg","components/ImageComponent.js","components/SliderComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImgComponent","src","alt","Slider","props","sliderArr","image1","image2","image3","image4","image5","id","defaultValue","buttons","useState","x","setX","direction","setDirection","swiped","setSwiped","useEffect","document","getElementById","click","_swipe","_onTouchStart","e","touch","touches","clientX","_onTouchMove","changedTouches","length","swiping","_onTouchEnd","swipeLength","Math","abs","onSwiped","moveTo","className","i","push","key","onClick","parseInt","target","innerHTML","buttonlist","map","item","index","onTouchStart","onTouchMove","onTouchEnd","style","transform","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c6c88e5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.d7a48767.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.55a12552.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.9d3a1438.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.78333861.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.7028fcd3.jpg\";","import React from 'react';\n\nfunction ImgComponent({src}){\n    \n    return (\n        <img src={src} alt=\"slider-img\"></img>\n    )\n}\n\nexport default ImgComponent","import React, {useState, useEffect} from 'react';\nimport '../styles/slider.sass'\nimport ImgComponent from './ImageComponent';\nimport image1 from \"../images/1.jpg\"\nimport image2 from \"../images/2.jpg\"\nimport image3 from \"../images/3.jpg\"\nimport image4 from \"../images/4.jpg\"\nimport image5 from \"../images/5.jpg\"\n\n\nfunction Slider(props) {\n    \n    let sliderArr = [\n        <ImgComponent src={image1} />, \n        <ImgComponent src={image2} />, \n        <ImgComponent src={image3} />,\n        <ImgComponent src={image4} />,\n        <ImgComponent src={image5} />,\n        <div id=\"example\">\n            <p>This is a test to show that it works for any kind of content</p>\n            <button>Example</button>\n            <textarea defaultValue=\"Example\"></textarea>\n        </div>\n    ]\n    let buttons = []\n    const buttonlist = (i) => {\n        for (let i = 1; i <= sliderArr.length; i++) {\n        buttons.push(<button className=\"navigation\" key={i} onClick={(e) => {e = parseInt(e.target.innerHTML); moveTo(e)}}>{i}</button>);\n          }\n          return buttons;\n    }\n    const [x, setX] = useState(0)\n    const [direction, setDirection] = useState('')\n    const [swiped, setSwiped] = useState(false)\n    useEffect(() => {\n        if(swiped === true) \n        {\n            if(direction === 'right to left') \n            {\n                document.getElementById('next').click(); \n                setSwiped(false);\n            } else {\n                document.getElementById('prev').click(); \n                setSwiped(false);\n            }\n        }\n    })\n    let _swipe = {}\n    const minDistance = 50\n\n    const _onTouchStart = (e) => {\n        const touch = e.touches[0];\n        _swipe = { x: touch.clientX };\n        setSwiped(false);\n      }\n    \n      const _onTouchMove = (e) => {\n        if (e.changedTouches && e.changedTouches.length) {\n          _swipe.swiping = true;\n        }\n      }\n    \n      const _onTouchEnd = (e) => {\n        const touch = e.changedTouches[0];\n        const swipeLength = touch.clientX - _swipe.x;\n        if (swipeLength < 0) {setDirection('right to left')} else {setDirection('left to right')}\n        if (_swipe.swiping && Math.abs(swipeLength) > minDistance ) {\n          props.onSwiped && props.onSwiped();\n          setSwiped(true)\n        }\n        _swipe = {};\n      }\n\n\n    const showPrev = () => {\n        x === 0 ? setX(-100 * (sliderArr.length - 1)) : setX(x + 100);\n    }\n    const showNext = () => {\n        x === -100 * (sliderArr.length - 1) ? setX(0) : setX(x - 100);\n    }\n    const moveTo = (e) => {\n        setX(-100*(e-1));\n    }\n\n\n\n    return (\n        <div className=\"slider\">        \n            <div id=\"outer\">\n                {buttonlist(1)}\n            </div>        \n        {\n            sliderArr.map((item, index) => {\n                return (\n                    <div key={index} \n                    onTouchStart={_onTouchStart}\n                    onTouchMove={_onTouchMove}\n                    onTouchEnd={_onTouchEnd}\n                    className=\"slide\" style={{transform: `translateX(${x}%)`}}>\n                        {item}\n                    </div>\n                )\n            })\n        }\n        <button id=\"prev\" onClick={showPrev}>\n            <i className=\"fas fa-chevron-left\"></i>\n        </button>\n        <button id=\"next\" onClick={showNext}>\n            <i className=\"fas fa-chevron-right\"></i>\n        </button>\n        </div>\n    )\n}\n\nexport default Slider;","import React from 'react';\nimport './App.sass';\nimport Slider from './components/SliderComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Slider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}